// Generated by gencpp from file ros_zumy/kalman.msg
// DO NOT EDIT!


#ifndef ROS_ZUMY_MESSAGE_KALMAN_H
#define ROS_ZUMY_MESSAGE_KALMAN_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_zumy
{
template <class ContainerAllocator>
struct kalman_
{
  typedef kalman_<ContainerAllocator> Type;

  kalman_()
    : measure_angular(0.0)
    , keyboard_angular(0.0)
    , linear_vel(0.0)
    , keyboard_linear(0.0)  {
    }
  kalman_(const ContainerAllocator& _alloc)
    : measure_angular(0.0)
    , keyboard_angular(0.0)
    , linear_vel(0.0)
    , keyboard_linear(0.0)  {
  (void)_alloc;
    }



   typedef double _measure_angular_type;
  _measure_angular_type measure_angular;

   typedef double _keyboard_angular_type;
  _keyboard_angular_type keyboard_angular;

   typedef double _linear_vel_type;
  _linear_vel_type linear_vel;

   typedef double _keyboard_linear_type;
  _keyboard_linear_type keyboard_linear;




  typedef boost::shared_ptr< ::ros_zumy::kalman_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_zumy::kalman_<ContainerAllocator> const> ConstPtr;

}; // struct kalman_

typedef ::ros_zumy::kalman_<std::allocator<void> > kalman;

typedef boost::shared_ptr< ::ros_zumy::kalman > kalmanPtr;
typedef boost::shared_ptr< ::ros_zumy::kalman const> kalmanConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_zumy::kalman_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_zumy::kalman_<ContainerAllocator> >::stream(s, "", v);
return s;
}

} // namespace ros_zumy

namespace ros
{
namespace message_traits
{



// BOOLTRAITS {'IsFixedSize': True, 'IsMessage': True, 'HasHeader': False}
// {'std_msgs': ['/opt/ros/indigo/share/std_msgs/cmake/../msg'], 'ros_zumy': ['/home/odroid/catkin_ws/src/ros_zumy/msg']}

// !!!!!!!!!!! ['__class__', '__delattr__', '__dict__', '__doc__', '__eq__', '__format__', '__getattribute__', '__hash__', '__init__', '__module__', '__ne__', '__new__', '__reduce__', '__reduce_ex__', '__repr__', '__setattr__', '__sizeof__', '__str__', '__subclasshook__', '__weakref__', '_parsed_fields', 'constants', 'fields', 'full_name', 'has_header', 'header_present', 'names', 'package', 'parsed_fields', 'short_name', 'text', 'types']




template <class ContainerAllocator>
struct IsFixedSize< ::ros_zumy::kalman_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_zumy::kalman_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_zumy::kalman_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_zumy::kalman_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_zumy::kalman_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_zumy::kalman_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_zumy::kalman_<ContainerAllocator> >
{
  static const char* value()
  {
    return "72c31c9e8bb2c2a7ea2d8eca16236f8f";
  }

  static const char* value(const ::ros_zumy::kalman_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x72c31c9e8bb2c2a7ULL;
  static const uint64_t static_value2 = 0xea2d8eca16236f8fULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_zumy::kalman_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_zumy/kalman";
  }

  static const char* value(const ::ros_zumy::kalman_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_zumy::kalman_<ContainerAllocator> >
{
  static const char* value()
  {
    return "float64 measure_angular\n\
float64 keyboard_angular\n\
float64 linear_vel\n\
float64 keyboard_linear\n\
";
  }

  static const char* value(const ::ros_zumy::kalman_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_zumy::kalman_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.measure_angular);
      stream.next(m.keyboard_angular);
      stream.next(m.linear_vel);
      stream.next(m.keyboard_linear);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct kalman_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_zumy::kalman_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_zumy::kalman_<ContainerAllocator>& v)
  {
    s << indent << "measure_angular: ";
    Printer<double>::stream(s, indent + "  ", v.measure_angular);
    s << indent << "keyboard_angular: ";
    Printer<double>::stream(s, indent + "  ", v.keyboard_angular);
    s << indent << "linear_vel: ";
    Printer<double>::stream(s, indent + "  ", v.linear_vel);
    s << indent << "keyboard_linear: ";
    Printer<double>::stream(s, indent + "  ", v.keyboard_linear);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_ZUMY_MESSAGE_KALMAN_H
